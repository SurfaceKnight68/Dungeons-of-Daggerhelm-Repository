<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Parameters
// chance to change corridor direction, in %:
rnd = 50
// dead end reduction steps:
cut = 12
// dead end joining chance (%):
dec = 100
// world size:
world_w = 31
world_h = 31
// room width (min,max):
wmin = 3
wmax = 5
// room height (min,max):
hmin = 3
hmax = 5
// rnum - number of rooms to generate.
rdef = 16
rmin = rdef - 2
rmax = rdef + 2
rnum = rmin + floor(random(1 + (rmax - rmin)))
// size for generating objects in maze:
wsiz1 = 32
wsiz2 = wsiz1 * 2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Generate a maze
// Clear the world:
for (i = 0; i &lt;= world_w; i += 1)
for (j = 0; j &lt;= world_h; j += 1)
w[i,j] = 0
// Set cursor to random position:
c_x = floor(random(world_w));
c_y = floor(random(world_h));
// Decide direction to move in:
pn = 4
px[1] =-1; py[1] = 0
px[2] = 1; py[2] = 0
px[3] = 0; py[3] =-1
px[4] = 0; py[4] = 1
pc = 1 + floor(random(pn));
d_x = px[pc];
d_y = py[pc];
done = 0;
//Current cell
w[c_x,c_y] = cf_visited
ve = world_w * world_h;
while !done
{
    w[c_x, c_y] |= cf_visited
    //screen_redraw();sleep(1);
    if (c_x &gt; 0) wpn(c_x-1,c_y,true);
    if (c_x &lt; world_w) wpn(c_x+1,c_y,true);
    if (c_y &gt; 0) wpn(c_x,c_y-1,true);
    if (c_y &lt; world_h) wpn(c_x,c_y+1,true);
    if sparsness(rnd, random(100)) // Just move straight:
    {
        wcn(c_x, c_y, d_x, d_y);
        c_x += d_x;
        c_y += d_y;
    }
    else
    {
        // check, where it's possible to turn:
        pn = 0;
        if (c_x &gt; 0) if !(w[c_x-1,c_y]&amp;cf_visited) { pn+=1; px[pn]=-1; py[pn]=0; }
        if (c_x &lt; world_w) if !(w[c_x+1,c_y]&amp;cf_visited) { pn+=1; px[pn]=1; py[pn]=0; }
        if (c_y &gt; 0) if !(w[c_x,c_y-1]&amp;cf_visited)  { pn+=1; px[pn]=0; py[pn]=-1; }
        if (c_y &lt; world_h) if !(w[c_x,c_y+1]&amp;cf_visited)  { pn+=1; px[pn]=0; py[pn]=+1; }
        // if it's possible to change direction, do it and move on:
        if (pn &gt; 0)
        {
            pc = floor(random(pn)) + 1
            d_x = px[pc]
            d_y = py[pc]
            wcn(c_x, c_y, d_x, d_y);
            if (pn == 1) w[c_x, c_y] |= cf_full
            c_x += d_x;
            c_y += d_y;
        }
        else
        {
            w[c_x, c_y] |= cf_full
            vs = 0;
            ve = 0;
            // Find non-full cell count:
            for (i = 0; i &lt;= world_w; i += 1)
            for (j = 0; j &lt;= world_h; j += 1)
            if (w[i,j] &amp; cf_visited) vs += !(w[i,j] &amp; cf_full)
            else ve += 1;
            // if there are still unvisited cells,
            // set current coords to one of non-full cells.
            if (ve = 0) done = 1
            else
            {
                vi = floor(random(vs)) + 1
                for (i = 0; i &lt;= world_w; i += 1)
                for (j = 0; j &lt;= world_h; j += 1)
                {
                    if (w[i,j] &amp; cf_visited)
                    if (!(w[i,j] &amp; cf_full))
                    {
                        vi -= 1
                        if (vi &lt;= 0)
                        {
                            c_x = i
                            c_y = j
                            i = world_w + 1
                            j = world_h + 1
                        }
                    }
                }
            }
        }
    }
}
room_caption = "Done!";
//screen_redraw();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reduce the ends of maze
//cf_proc is a temporary variable to show processed cells,
//to counter some bugs.
repeat (cut)
{
    for (i = 0; i &lt;= world_w; i += 1)
    for (j = 0; j &lt;= world_h; j += 1)
    w[i,j] &amp;= c_white ^ cf_proc
    for (i = 0; i &lt;= world_w; i += 1)
    for (j = 0; j &lt;= world_h; j += 1)
    {
        pn = 0;
        if w[i,j] &amp; cf_up { pn += 1; px[pn] =  0; py[pn] = -1; }
        if w[i,j] &amp; cf_dn { pn += 1; px[pn] =  0; py[pn] =  1; }
        if w[i,j] &amp; cf_lt { pn += 1; px[pn] = -1; py[pn] =  0; }
        if w[i,j] &amp; cf_rt { pn += 1; px[pn] =  1; py[pn] =  0; }
        if (pn = 1 &amp;&amp; !(w[i,j]&amp;cf_proc))
        {
            wdc(i,j,px[pn],py[pn]);
            w[i,j] |= cf_proc
            w[i + px[1], j + py[1]] |= cf_proc
        }
    }
}
room_caption = "Done reducing ends";
//screen_redraw();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make the maze loopable (connect the dead ends)
for (i=0;i&lt;=world_w;i+=1)
for (j=0;j&lt;=world_h;j+=1)
w[i,j] &amp;= c_white ^ cf_proc
for (i=0;i&lt;=world_w;i+=1) for (j=0;j&lt;=world_h;j+=1)
{
    pn = 0;
    if w[i,j] &amp; cf_up { pn += 1; px[pn] = 0; py[pn] = -1; }
    if w[i,j] &amp; cf_dn { pn += 1; px[pn] = 0; py[pn] = +1; }
    if w[i,j] &amp; cf_lt { pn += 1; px[pn] = -1; py[pn] = 0; }
    if w[i,j] &amp; cf_rt { pn += 1; px[pn] = +1; py[pn] = 0; }
    if (pn == 1) if (1)
    {
        pn = 0;
        c_x = i;c_y = j;
        if (c_x &gt; 0)
            if (w[c_x-1,c_y]&gt;33 &amp;&amp; !(w[c_x,c_y]&amp;cf_lt) ) { pn+=1; px[pn]=-1;py[pn]=0;}
        if (c_x &lt; world_w)
            if (w[c_x+1,c_y]&gt;33 &amp;&amp; !(w[c_x,c_y]&amp;cf_rt) ) { pn+=1; px[pn]=1;py[pn]=0;}
        if (c_y &gt; 0)
            if (w[c_x,c_y-1]&gt;33 &amp;&amp; !(w[c_x,c_y]&amp;cf_up) ) { pn+=1; px[pn]=0;py[pn]=-1;}
        if (c_y &lt; world_h)
            if (w[c_x,c_y+1]&gt;33 &amp;&amp; !(w[c_x,c_y]&amp;cf_dn) ) { pn+=1; px[pn]=0;py[pn]=+1;}
        pc = 1 + floor(random(pn));
        wcn(c_x, c_y, px[pc], py[pc]);
    }
}
room_caption = "Done merging dead ends";
//screen_redraw();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Generate rooms (the slowest part)
//Comment this out if you dont need rooms.
//Technology is slow, because it picks the best suitable place for a room
//The smaller is your maze, the better.
rdon = 0;
cf_temp = cf_full | cf_visited
repeat(rnum)
{
    rgb = 16777215
    rgx = 0
    rgy = 0
    rw = wmin + floor(random(wmax - wmin + 1))
    rh = hmin + floor(random(hmax - hmin + 1))
    for (i = 0; i &lt;= world_w - rw; i += 1)
    for (j = 0; j &lt;= world_h - rh; j += 1)
    {
        rgc = 0;
        for (k = i; k &lt;= i + rw; k += 1)
        for (l = j; l &lt;= j + rh; l += 1)
        {
            if (w[k,l] &amp; cf_room)
            {
                rgc += 100
                continue
            }
            if (w[k, l] &lt;= cf_temp) continue
            if (k &gt; 0)
            if (w[k-1,l] &gt; cf_temp)
            {
                rgc += 1
                continue
            }
            if (k &lt; world_w)
            if (w[k+1,l] &gt; cf_temp)
            {
                rgc += 1
                continue
            }
            if (l &gt; 0)
            if (w[k,l-1] &gt; cf_temp)
            {
                rgc += 1
                continue
            }
            if (l &lt; world_h)
            if (w[k,l+1] &gt; cf_temp)
            {
                rgc += 1
                continue
            }
        }
        if (rgc != 0) if (rgc &lt; rgb) || (rgc == rgb &amp;&amp; random(100) &lt; 15) then
        {
            rgx = i;
            rgy = j;
            rgb = rgc;
        }
    }
    for (k = rgx; k &lt;= rgx + rw; k += 1) 
    for (l = rgy; l &lt;= rgy + rh; l += 1)
    {
        w[k, l] |= cf_room
        if (k &lt; rgx + rw)
        {
            w[k, l] |= cf_rt
            w[k+1, l] |= cf_lt
        }
        if (l &lt; rgy + rh)
        {
            w[k, l] |= cf_dn
            w[k, l+1] |= cf_up
        }
    }
    rdon += 1
    // Plug in your room-related code here:
    if (rdon == 1) {
        instance_create(
            wsiz2 * irandom_range(rgx, rgx + rw),
            wsiz2 * irandom_range(rgy, rgy + rh),
            obj_player)
    }
    //
    window_set_caption("["+string(rdon)+"/"+string(rnum)+"] Rooms")
}
room_caption = "Done generating rooms";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sample code to create wall objects 
for (i=0;i&lt;=world_w+1;i+=1) for (j=0;j&lt;=world_h+1;j+=1)
{
if (i&lt;=world_w&amp;&amp;j&lt;=world_h) _v = w[i,j]; else _v = 0;
_n = 0;
if _v &amp; cf_up _n += 1;
if _v &amp; cf_dn _n += 1;
if _v &amp; cf_lt _n += 1;
if _v &amp; cf_rt _n += 1;
_x = i * wsiz2 - wsiz1;
_y = j * wsiz2 - wsiz1;
if (_x &gt; 0 &amp;&amp; _y &gt; 0) _w = w[i-1,j-1]; else _w = 0;
if !((_v&amp;cf_up)&amp;&amp;(_v&amp;cf_lt)&amp;&amp;(_w&amp;cf_dn)&amp;&amp;(_w&amp;cf_rt)) instance_create(_x, _y, obj_wall);
if !(_n&gt;0)&amp;&amp;(i&lt;=world_w)&amp;&amp;(j&lt;=world_h) instance_create(_x+wsiz1, _y+wsiz1, obj_wall);
if (i &lt;= world_w) if !(_v&amp;cf_up) instance_create(_x+wsiz1, _y ,obj_wall);
if (j &lt;= world_h) if !(_v&amp;cf_lt) instance_create(_x, _y+wsiz1, obj_wall);
}
background_alpha = 0.5
visible = 0
screen_redraw()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
