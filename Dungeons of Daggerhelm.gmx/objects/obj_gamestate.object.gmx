<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_inv_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize IVARS
global.game_state = 'run';
global.chest_state = 'closed';
global.item = -1;

global.gamespeed = 1.0;
global.dest_x = 448;
global.dest_y = 1136;

global.switches = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.item != -1) {
    if(instance_position(mouse_x,mouse_y,obj_inventory_box)) {
        var box = instance_position(mouse_x,mouse_y,obj_inventory_box);
        
        //Make sure slot is empty
        if(box.item == -1 &amp;&amp; (box.type == scr_get_item_value(global.item, 'type') || box.type == '')) {
                //Put item in box
                                
            if(box.type == 'weapon') {
                if(global.identity == scr_get_item_value(global.item, 'spec1') || global.identity == scr_get_item_value(global.item, 'spec2')) {
                    box.item = global.item;
                    global.bonus_str += scr_get_item_value(global.item, 'strength');
                    global.bonus_wis += scr_get_item_value(global.item, 'wisdom');
                    global.bonus_for += scr_get_item_value(global.item, 'fortitude');
                } else {
                    instance_create(obj_player.x,obj_player.y,global.item);
                    global.item = -1;
                }
            }
            if(box.type == 'head') {
                if(global.identity == scr_get_item_value(global.item, 'spec1') || global.identity == scr_get_item_value(global.item, 'spec2')) {
                    box.item = global.item;
                    global.bonus_str += scr_get_item_value(global.item, 'strength');
                    global.bonus_wis += scr_get_item_value(global.item, 'wisdom');
                    global.bonus_for += scr_get_item_value(global.item, 'fortitude');
                } else {
                    instance_create(obj_player.x,obj_player.y,global.item);
                    global.item = -1;
                }
            }
            if(box.type == 'chest') {
                if(global.identity == scr_get_item_value(global.item, 'spec1') || global.identity == scr_get_item_value(global.item, 'spec2')) {
                    box.item = global.item;
                    global.bonus_str += scr_get_item_value(global.item, 'strength');
                    global.bonus_wis += scr_get_item_value(global.item, 'wisdom');
                    global.bonus_for += scr_get_item_value(global.item, 'fortitude');
                } else {
                    instance_create(obj_player.x,obj_player.y,global.item);
                    global.item = -1;
                }
            }
            if(box.type == 'legs') {
                if(global.identity == scr_get_item_value(global.item, 'spec1') || global.identity == scr_get_item_value(global.item, 'spec2')) {
                    box.item = global.item;
                    global.bonus_str += scr_get_item_value(global.item, 'strength');
                    global.bonus_wis += scr_get_item_value(global.item, 'wisdom');
                    global.bonus_for += scr_get_item_value(global.item, 'fortitude');
                } else {
                    instance_create(obj_player.x,obj_player.y,global.item);
                    global.item = -1;
                }
            }
                box.item = global.item;
                with(box.item) {
                            if(file_exists("savedata.ini")) {
                                ini_open("savedata.ini");
                                ini_write_real("Save1","inv_slot",global.item);
                            }
                        }
                audio_play_sound(snd_item_inv,10,false);
                global.item = -1;               
        } else {
        
            // Drop item on ground
            instance_create(obj_player.x,obj_player.y,global.item);
            global.item = -1;
        
        }
        
    } else {
        //Drop item on ground
        instance_create(obj_player.x,obj_player.y,global.item);
        global.item = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the held item

if (global.item != -1) {
    draw_sprite(object_get_sprite(global.item), 0 ,mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var chest_dist = point_distance(obj_player.phy_position_x,obj_player.phy_position_y,obj_loot_chest.x,obj_loot_chest.y);

if(chest_dist &lt; 48) {
    switch (global.chest_state) {

        case 'closed':
            global.chest_state = 'open';
            break;
        case 'open':
            global.chest_state = 'closed';
            break;
        default:
            break;
    }
}

if(chest_dist &gt; 48) {
    global.chest_state = 'closed';
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control game state

switch (global.game_state) {

    case 'run':
        global.game_state = 'pause';
        break;
    case 'pause':
        global.game_state = 'run';
        break;
    default:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
